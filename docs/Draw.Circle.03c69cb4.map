{"version":3,"sources":["resources/leaflet.draw/draw/handler/Draw.Circle.js"],"names":["L","Draw","Circle","SimpleShape","extend","statics","TYPE","options","shapeOptions","stroke","color","weight","opacity","fill","fillColor","fillOpacity","clickable","showRadius","metric","feet","nautic","initialize","map","type","_initialLabelText","drawLocal","draw","handlers","circle","tooltip","start","prototype","call","_drawShape","latlng","GeometryUtil","isVersion07x","distance","_startLatLng","distanceTo","_map","_shape","setRadius","addLayer","_fireCreatedEvent","getRadius","_onMouseMove","e","radius","useMetric","_tooltip","updatePosition","_isDrawing","toFixed","subtext","readableDistance","updateContent","text","_endLabelText"],"mappings":";AAKAA,EAAEC,KAAKC,OAASF,EAAEC,KAAKE,YAAYC,OAAO,CACzCC,QAAS,CACRC,KAAM,UAGPC,QAAS,CACRC,aAAc,CACbC,QAAQ,EACRC,MAAO,UACPC,OAAQ,EACRC,QAAS,GACTC,MAAM,EACNC,UAAW,KACXC,YAAa,GACbC,WAAW,GAEZC,YAAY,EACZC,QAAQ,EACRC,MAAM,EACNC,QAAQ,GAITC,WAAY,SAAUC,EAAKf,GAErBgB,KAAAA,KAAOvB,EAAEC,KAAKC,OAAOI,KAErBkB,KAAAA,kBAAoBxB,EAAEyB,UAAUC,KAAKC,SAASC,OAAOC,QAAQC,MAElE9B,EAAEC,KAAKE,YAAY4B,UAAUV,WAAWW,KAAK,KAAMV,EAAKf,IAGzD0B,WAAY,SAAUC,GAEjBlC,GAAAA,EAAEmC,aAAaC,eACdC,IAAAA,EAAW,KAAKC,aAAaC,WAAWL,QAExCG,EAAW,KAAKG,KAAKH,SAAS,KAAKC,aAAcJ,GAGjD,KAAKO,OAIJA,KAAAA,OAAOC,UAAUL,IAHjBI,KAAAA,OAAS,IAAIzC,EAAEE,OAAO,KAAKoC,aAAcD,EAAU,KAAK9B,QAAQC,cAChEgC,KAAAA,KAAKG,SAAS,KAAKF,UAM1BG,kBAAmB,WACdhB,IAAAA,EAAS,IAAI5B,EAAEE,OAAO,KAAKoC,aAAc,KAAKG,OAAOI,YAAa,KAAKtC,QAAQC,cACnFR,EAAEC,KAAKE,YAAY4B,UAAUa,kBAAkBZ,KAAK,KAAMJ,IAG3DkB,aAAc,SAAUC,GACnBb,IAGHc,EAHGd,EAASa,EAAEb,OACdjB,EAAa,KAAKV,QAAQU,WAC1BgC,EAAY,KAAK1C,QAAQW,OAItB,GADCgC,KAAAA,SAASC,eAAejB,GACzB,KAAKkB,WAAY,CACfnB,KAAAA,WAAWC,GAGhBc,EAAS,KAAKP,OAAOI,YAAYQ,QAAQ,GAErCC,IAAAA,EAAU,GACVrC,IACHqC,EAAUtD,EAAEyB,UAAUC,KAAKC,SAASC,OAAOoB,OAAS,KACnDhD,EAAEmC,aAAaoB,iBAAiBP,EAAQC,EAAW,KAAK1C,QAAQY,KAAM,KAAKZ,QAAQa,SAEhF8B,KAAAA,SAASM,cAAc,CAC3BC,KAAM,KAAKC,cACXJ,QAASA","file":"Draw.Circle.03c69cb4.map","sourceRoot":"..","sourcesContent":["/**\n * @class L.Draw.Circle\n * @aka Draw.Circle\n * @inherits L.Draw.SimpleShape\n */\nL.Draw.Circle = L.Draw.SimpleShape.extend({\n\tstatics: {\n\t\tTYPE: 'circle'\n\t},\n\n\toptions: {\n\t\tshapeOptions: {\n\t\t\tstroke: true,\n\t\t\tcolor: '#3388ff',\n\t\t\tweight: 4,\n\t\t\topacity: 0.5,\n\t\t\tfill: true,\n\t\t\tfillColor: null, //same as color by default\n\t\t\tfillOpacity: 0.2,\n\t\t\tclickable: true\n\t\t},\n\t\tshowRadius: true,\n\t\tmetric: true, // Whether to use the metric measurement system or imperial\n\t\tfeet: true, // When not metric, use feet instead of yards for display\n\t\tnautic: false // When not metric, not feet use nautic mile for display\n\t},\n\n\t// @method initialize(): void\n\tinitialize: function (map, options) {\n\t\t// Save the type so super can fire, need to do this as cannot do this.TYPE :(\n\t\tthis.type = L.Draw.Circle.TYPE;\n\n\t\tthis._initialLabelText = L.drawLocal.draw.handlers.circle.tooltip.start;\n\n\t\tL.Draw.SimpleShape.prototype.initialize.call(this, map, options);\n\t},\n\n\t_drawShape: function (latlng) {\n\t\t// Calculate the distance based on the version\n\t\tif (L.GeometryUtil.isVersion07x()) {\n\t\t\tvar distance = this._startLatLng.distanceTo(latlng);\n\t\t} else {\n\t\t\tvar distance = this._map.distance(this._startLatLng, latlng);\n\t\t}\n\n\t\tif (!this._shape) {\n\t\t\tthis._shape = new L.Circle(this._startLatLng, distance, this.options.shapeOptions);\n\t\t\tthis._map.addLayer(this._shape);\n\t\t} else {\n\t\t\tthis._shape.setRadius(distance);\n\t\t}\n\t},\n\n\t_fireCreatedEvent: function () {\n\t\tvar circle = new L.Circle(this._startLatLng, this._shape.getRadius(), this.options.shapeOptions);\n\t\tL.Draw.SimpleShape.prototype._fireCreatedEvent.call(this, circle);\n\t},\n\n\t_onMouseMove: function (e) {\n\t\tvar latlng = e.latlng,\n\t\t\tshowRadius = this.options.showRadius,\n\t\t\tuseMetric = this.options.metric,\n\t\t\tradius;\n\n\t\tthis._tooltip.updatePosition(latlng);\n\t\tif (this._isDrawing) {\n\t\t\tthis._drawShape(latlng);\n\n\t\t\t// Get the new radius (rounded to 1 dp)\n\t\t\tradius = this._shape.getRadius().toFixed(1);\n\n\t\t\tvar subtext = '';\n\t\t\tif (showRadius) {\n\t\t\t\tsubtext = L.drawLocal.draw.handlers.circle.radius + ': ' +\n\t\t\t\t\tL.GeometryUtil.readableDistance(radius, useMetric, this.options.feet, this.options.nautic);\n\t\t\t}\n\t\t\tthis._tooltip.updateContent({\n\t\t\t\ttext: this._endLabelText,\n\t\t\t\tsubtext: subtext\n\t\t\t});\n\t\t}\n\t}\n});\n"]}