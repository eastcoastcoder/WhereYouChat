{"version":3,"sources":["resources/leaflet.draw/ext/Polygon.Intersect.js"],"names":["L","Polygon","include","intersects","polylineIntersects","len","firstPoint","lastPoint","maxIndex","points","_getProjectedPoints","_tooFewPointsForIntersection","Polyline","prototype","call","length","_lineSegmentsIntersectsRange"],"mappings":";AAIAA,EAAEC,QAAQC,QAAQ,CAIjBC,WAAY,WACPC,IAEHC,EAAKC,EAAYC,EAAWC,EAD5BC,EAAS,KAAKC,sBAGX,OAAA,KAAKC,mCAIYX,EAAEY,SAASC,UAAUV,WAAWW,KAAK,QAO1DT,EAAMI,EAAOM,OACbT,EAAaG,EAAO,GACpBF,EAAYE,EAAOJ,EAAM,GACzBG,EAAWH,EAAM,EAGV,KAAKW,6BAA6BT,EAAWD,EAAYE,EAAU","file":"Polygon.Intersect.de0cc6af.map","sourceRoot":"..","sourcesContent":["/**\n * @class L.Polygon\n * @aka Polygon\n */\nL.Polygon.include({\n\n\t// @method intersects(): boolean\n\t// Checks a polygon for any intersecting line segments. Ignores holes.\n\tintersects: function () {\n\t\tvar polylineIntersects,\n\t\t\tpoints = this._getProjectedPoints(),\n\t\t\tlen, firstPoint, lastPoint, maxIndex;\n\n\t\tif (this._tooFewPointsForIntersection()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tpolylineIntersects = L.Polyline.prototype.intersects.call(this);\n\n\t\t// If already found an intersection don't need to check for any more.\n\t\tif (polylineIntersects) {\n\t\t\treturn true;\n\t\t}\n\n\t\tlen = points.length;\n\t\tfirstPoint = points[0];\n\t\tlastPoint = points[len - 1];\n\t\tmaxIndex = len - 2;\n\n\t\t// Check the line segment between last and first point. Don't need to check the first line segment (minIndex = 1)\n\t\treturn this._lineSegmentsIntersectsRange(lastPoint, firstPoint, maxIndex, 1);\n\t}\n});\n"]}