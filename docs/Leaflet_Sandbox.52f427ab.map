{"version":3,"sources":["index.js"],"names":["osmUrl","osmAttrib","snapchat","L","tileLayer","maxZoom","fakeSnapchat","osm","attribution","map","Map","center","LatLng","zoom","drawnItems","featureGroup","addTo","control","layers","position","collapsed","jumpToLocation","addControl","Control","Draw","edit","poly","allowIntersection","draw","polygon","showArea","_round","num","len","Math","round","pow","strLatLng","latlng","lat","lng","getPopupContent","layer","Marker","CircleMarker","getLatLng","Circle","radius","getRadius","Polygon","latlngs","_defaultShape","getLatLngs","area","GeometryUtil","geodesicArea","readableArea","Polyline","distance","length","i","distanceTo","places","omnivore","kml","on","console","log","eachLayer","myPopup","feature","properties","City","Month","Year","Country","Notes","bindPopup","locationLabel","document","getElementById","navigator","innerHTML","geolocation","getCurrentPosition","success","latitude","coords","longitude","marker","circle","setView","error","e","Event","CREATED","event","content","addLayer","EDITED","setPopupContent"],"mappings":"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","file":"Leaflet_Sandbox.52f427ab.map","sourceRoot":"..","sourcesContent":["\nconst osmUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\nconst osmAttrib = '&copy; <a href=\"http://openstreetmap.org/copyright\">OpenStreetMap</a> contributors';\nconst snapchat = L.tileLayer('https://api.mapbox.com/styles/v1/nkmap/cjftto4dl8hq32rqegicxuwjz/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoibmttYXAiLCJhIjoiY2lwN2VqdDh2MDEzbXN5bm9hODJzZ2NlZSJ9.aVnii-A7yCa632_COjFDMQ', {maxZoom: 18});\nconst fakeSnapchat = L.tileLayer('https://api.mapbox.com/styles/v1/ethanx94/cjgaaxn871il62sp1e80vkog1/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoiZXRoYW54OTQiLCJhIjoiY2pnYWF0YWZvMW5neTJ5bXQ3d2VuaDBrcCJ9.jYfc6WsaQ7jMNm0GGr27Zw', {maxZoom: 18});\nconst osm = L.tileLayer(osmUrl, {maxZoom: 18, attribution: osmAttrib});\nconst map = new L.Map('map', {center: new L.LatLng(37.7220, -89.2043), zoom: 15});\nconst drawnItems = L.featureGroup().addTo(map);\n\nL.control.layers({\n    \"snapchat\": snapchat.addTo(map),\n    \"fakeSnapchat\": fakeSnapchat,\n    \"osm\": osm,\n    \"google\": L.tileLayer('http://www.google.cn/maps/vt?lyrs=s@189&gl=cn&x={x}&y={y}&z={z}', {\n        attribution: 'google'\n    })\n}, {'drawlayer':drawnItems}, { position: 'topright', collapsed: false }).addTo(map);\n\njumpToLocation(map);\nmap.addControl(new L.Control.Draw({\n    edit: {\n        featureGroup: drawnItems,\n        poly : {\n            allowIntersection : false\n        }\n    },\n    draw: {\n        polygon : {\n            allowIntersection: false,\n            showArea:true\n        }\n    }\n}));\n\n// Truncate value based on number of decimals\nconst _round = function(num, len) {\n    return Math.round(num*(Math.pow(10, len)))/(Math.pow(10, len));\n};\n// Helper method to format LatLng object (x.xxxxxx, y.yyyyyy)\nconst strLatLng = function(latlng) {\n    return \"(\"+_round(latlng.lat, 6)+\", \"+_round(latlng.lng, 6)+\")\";\n};\n\n// Generate popup content based on layer type\n// - Returns HTML string, or null if unknown object\nconst getPopupContent = function(layer) {\n    // Marker - add lat/long\n    if (layer instanceof L.Marker || layer instanceof L.CircleMarker) {\n        return strLatLng(layer.getLatLng());\n    // Circle - lat/long, radius\n    } else if (layer instanceof L.Circle) {\n        var center = layer.getLatLng(),\n            radius = layer.getRadius();\n        return \"Center: \"+strLatLng(center)+\"<br />\"\n              +\"Radius: \"+_round(radius, 2)+\" m\";\n    // Rectangle/Polygon - area\n    } else if (layer instanceof L.Polygon) {\n        var latlngs = layer._defaultShape ? layer._defaultShape() : layer.getLatLngs(),\n            area = L.GeometryUtil.geodesicArea(latlngs);\n        return \"Area: \"+L.GeometryUtil.readableArea(area, true);\n    // Polyline - distance\n    } else if (layer instanceof L.Polyline) {\n        var latlngs = layer._defaultShape ? layer._defaultShape() : layer.getLatLngs(),\n            distance = 0;\n        if (latlngs.length < 2) {\n            return \"Distance: N/A\";\n        } else {\n            for (var i = 0; i < latlngs.length-1; i++) {\n                distance += latlngs[i].distanceTo(latlngs[i+1]);\n            }\n            return \"Distance: \"+_round(distance, 2)+\" m\";\n        }\n    }\n    return null;\n};\n\nconst places = omnivore.kml('./resources/places.kml')\n  .on('ready', function() {\n      console.log(places);\n      places.eachLayer(function(layer) {\n          let myPopup = '';\n          myPopup += layer.feature.properties.City ? `City: ${layer.feature.properties.City}<br />` : '';\n          myPopup += layer.feature.properties.Month ? `Month: ${layer.feature.properties.Month}<br />` : '';\n          myPopup += layer.feature.properties.Year ? `Year: ${layer.feature.properties.Year}<br />` : '';\n          myPopup += layer.feature.properties.Country ? `Country: ${layer.feature.properties.Country}<br />` : '';\n          myPopup += layer.feature.properties.Notes ? `Notes: ${layer.feature.properties.Notes}` : '';\n          layer.bindPopup(myPopup);\n      });\n  })\n  .addTo(map);\n\n// Object created - bind popup to layer, add to feature group\nmap.on(L.Draw.Event.CREATED, function(event) {\n    var layer = event.layer;\n    var content = getPopupContent(layer);\n    if (content !== null) {\n        layer.bindPopup(content);\n    }\n    drawnItems.addLayer(layer);\n});\n\n// Object(s) edited - update popups\nmap.on(L.Draw.Event.EDITED, function(event) {\n    var layers = event.layers,\n        content = null;\n    layers.eachLayer(function(layer) {\n        content = getPopupContent(layer);\n        if (content !== null) {\n            layer.setPopupContent(content);\n        }\n    });\n});\n\nfunction jumpToLocation(map) {\n  var locationLabel = document.getElementById('location');\n  locationLabel.innerHTML = 'Your Location is: ';\n  if (!navigator.geolocation){\n    locationLabel.innerHTML = \"<h4>Geolocation is not supported by your browser</h4>\";\n  } \n  function success(position) {\n    var zoom = 16;\n    var accuracyRadius = 500; // Hardcoded\n    var latitude  = position.coords.latitude;\n    var longitude = position.coords.longitude;\n    locationLabel.innerHTML = '<p>Latitude is ' + latitude + '° <br>Longitude is ' + longitude + '°</p>';\n    L.marker([latitude, longitude]).addTo(map);\n    L.circle([latitude, longitude], accuracyRadius).addTo(map);\n    map.setView([latitude, longitude], zoom);\n  }\n  function error(e) {\n    locationLabel.innerHTML = \"Unable to retrieve your location\";\n  }\n  locationLabel.innerHTML = \"<p>Locating…</p>\";\n  \n  return navigator.geolocation.getCurrentPosition(success, error);\n}"]}