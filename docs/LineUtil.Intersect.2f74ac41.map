{"version":3,"sources":["resources/leaflet.draw/ext/LineUtil.Intersect.js"],"names":["L","Util","extend","LineUtil","segmentsIntersect","p","p1","p2","p3","_checkCounterclockwise","y","x"],"mappings":";AAKAA,EAAEC,KAAKC,OAAOF,EAAEG,SAAU,CAKzBC,kBAAmB,SAAoBC,EAAaC,EAAcC,EAAcC,GACxE,OAAA,KAAKC,uBAAuBJ,EAAGE,EAAIC,KACzC,KAAKC,uBAAuBH,EAAIC,EAAIC,IACpC,KAAKC,uBAAuBJ,EAAGC,EAAIC,KACnC,KAAKE,uBAAuBJ,EAAGC,EAAIE,IAIrCC,uBAAwB,SAAoBJ,EAAaC,EAAcC,GAC/D,OAACA,EAAGG,EAAIL,EAAEK,IAAMJ,EAAGK,EAAIN,EAAEM,IAAML,EAAGI,EAAIL,EAAEK,IAAMH,EAAGI,EAAIN,EAAEM","file":"LineUtil.Intersect.2f74ac41.map","sourceRoot":"..","sourcesContent":["/**\n * @class L.LineUtil\n * @aka Util\n * @aka L.Utils\n */\nL.Util.extend(L.LineUtil, {\n\n\t// @method segmentsIntersect(): boolean\n\t// Checks to see if two line segments intersect. Does not handle degenerate cases.\n\t// http://compgeom.cs.uiuc.edu/~jeffe/teaching/373/notes/x06-sweepline.pdf\n\tsegmentsIntersect: function (/*Point*/ p, /*Point*/ p1, /*Point*/ p2, /*Point*/ p3) {\n\t\treturn this._checkCounterclockwise(p, p2, p3) !==\n\t\t\tthis._checkCounterclockwise(p1, p2, p3) &&\n\t\t\tthis._checkCounterclockwise(p, p1, p2) !==\n\t\t\tthis._checkCounterclockwise(p, p1, p3);\n\t},\n\n\t// check to see if points are in counterclockwise order\n\t_checkCounterclockwise: function (/*Point*/ p, /*Point*/ p1, /*Point*/ p2) {\n\t\treturn (p2.y - p.y) * (p1.x - p.x) > (p1.y - p.y) * (p2.x - p.x);\n\t}\n});\n"]}