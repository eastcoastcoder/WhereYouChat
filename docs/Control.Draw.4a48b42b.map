{"version":3,"sources":["resources/leaflet.draw/Control.Draw.js"],"names":["L","Control","Draw","extend","options","position","draw","edit","initialize","version","Error","toolbar","prototype","call","_toolbars","DrawToolbar","TYPE","on","_toolbarEnabled","EditToolbar","onAdd","map","container","toolbarContainer","DomUtil","create","addedTopClass","toolbarId","hasOwnProperty","addToolbar","hasClass","addClass","childNodes","appendChild","onRemove","removeToolbar","setDrawingOptions","setOptions","e","enabledToolbar","target","disable","Map","mergeOptions","drawControlTooltips","drawControl","addInitHook","addControl"],"mappings":";AAIAA,EAAEC,QAAQC,KAAOF,EAAEC,QAAQE,OAAO,CAGjCC,QAAS,CACRC,SAAU,UACVC,KAAM,GACNC,MAAM,GAKPC,WAAY,SAAUJ,GACjBJ,GAAAA,EAAES,QAAU,MACT,MAAA,IAAIC,MAAM,yGAKbC,IAAAA,EAFJX,EAAEC,QAAQW,UAAUJ,WAAWK,KAAK,KAAMT,GAIrCU,KAAAA,UAAY,GAGbd,EAAEe,aAAe,KAAKX,QAAQE,OACjCK,EAAU,IAAIX,EAAEe,YAAY,KAAKX,QAAQE,MAEpCQ,KAAAA,UAAUd,EAAEe,YAAYC,MAAQL,EAGhCG,KAAAA,UAAUd,EAAEe,YAAYC,MAAMC,GAAG,SAAU,KAAKC,gBAAiB,OAGnElB,EAAEmB,aAAe,KAAKf,QAAQG,OACjCI,EAAU,IAAIX,EAAEmB,YAAY,KAAKf,QAAQG,MAEpCO,KAAAA,UAAUd,EAAEmB,YAAYH,MAAQL,EAGhCG,KAAAA,UAAUd,EAAEmB,YAAYH,MAAMC,GAAG,SAAU,KAAKC,gBAAiB,OAEvElB,EAAEW,QAAU,MAKbS,MAAO,SAAUC,GACZC,IAGHC,EAHGD,EAAYtB,EAAEwB,QAAQC,OAAO,MAAO,gBACvCC,GAAgB,EAIZ,IAAA,IAAIC,KAAa,KAAKb,UACtB,KAAKA,UAAUc,eAAeD,KACjCJ,EAAmB,KAAKT,UAAUa,GAAWE,WAAWR,MAIlDK,IACC1B,EAAEwB,QAAQM,SAASP,EAVZ,6BAWXvB,EAAEwB,QAAQO,SAASR,EAAiBS,WAAW,GAXpC,4BAaZN,GAAgB,GAGjBJ,EAAUW,YAAYV,IAKlBD,OAAAA,GAKRY,SAAU,WACJ,IAAA,IAAIP,KAAa,KAAKb,UACtB,KAAKA,UAAUc,eAAeD,IAC5Bb,KAAAA,UAAUa,GAAWQ,iBAO7BC,kBAAmB,SAAUhC,GACvB,IAAA,IAAIuB,KAAa,KAAKb,UACtB,KAAKA,UAAUa,aAAsB3B,EAAEe,aACrCD,KAAAA,UAAUa,GAAWU,WAAWjC,IAKxCc,gBAAiB,SAAUoB,GACtBC,IAAAA,EAAiBD,EAAEE,OAElB,IAAA,IAAIb,KAAa,KAAKb,UACtB,KAAKA,UAAUa,KAAeY,GAC5BzB,KAAAA,UAAUa,GAAWc,aAM9BzC,EAAE0C,IAAIC,aAAa,CAClBC,qBAAqB,EACrBC,aAAa,IAGd7C,EAAE0C,IAAII,YAAY,WACb,KAAK1C,QAAQyC,cACXA,KAAAA,YAAc,IAAI7C,EAAEC,QAAQC,KAC5B6C,KAAAA,WAAW,KAAKF","file":"Control.Draw.4a48b42b.map","sourceRoot":"..","sourcesContent":["/**\n * @class L.Control.Draw\n * @aka L.Draw\n */\nL.Control.Draw = L.Control.extend({\n\n\t// Options\n\toptions: {\n\t\tposition: 'topleft',\n\t\tdraw: {},\n\t\tedit: false\n\t},\n\n\t// @method initialize(): void\n\t// Initializes draw control, toolbars from the options\n\tinitialize: function (options) {\n\t\tif (L.version < '0.7') {\n\t\t\tthrow new Error('Leaflet.draw 0.2.3+ requires Leaflet 0.7.0+. Download latest from https://github.com/Leaflet/Leaflet/');\n\t\t}\n\n\t\tL.Control.prototype.initialize.call(this, options);\n\n\t\tvar toolbar;\n\n\t\tthis._toolbars = {};\n\n\t\t// Initialize toolbars\n\t\tif (L.DrawToolbar && this.options.draw) {\n\t\t\ttoolbar = new L.DrawToolbar(this.options.draw);\n\n\t\t\tthis._toolbars[L.DrawToolbar.TYPE] = toolbar;\n\n\t\t\t// Listen for when toolbar is enabled\n\t\t\tthis._toolbars[L.DrawToolbar.TYPE].on('enable', this._toolbarEnabled, this);\n\t\t}\n\n\t\tif (L.EditToolbar && this.options.edit) {\n\t\t\ttoolbar = new L.EditToolbar(this.options.edit);\n\n\t\t\tthis._toolbars[L.EditToolbar.TYPE] = toolbar;\n\n\t\t\t// Listen for when toolbar is enabled\n\t\t\tthis._toolbars[L.EditToolbar.TYPE].on('enable', this._toolbarEnabled, this);\n\t\t}\n\t\tL.toolbar = this; //set global var for editing the toolbar\n\t},\n\n\t// @method onAdd(): container\n\t// Adds the toolbar container to the map\n\tonAdd: function (map) {\n\t\tvar container = L.DomUtil.create('div', 'leaflet-draw'),\n\t\t\taddedTopClass = false,\n\t\t\ttopClassName = 'leaflet-draw-toolbar-top',\n\t\t\ttoolbarContainer;\n\n\t\tfor (var toolbarId in this._toolbars) {\n\t\t\tif (this._toolbars.hasOwnProperty(toolbarId)) {\n\t\t\t\ttoolbarContainer = this._toolbars[toolbarId].addToolbar(map);\n\n\t\t\t\tif (toolbarContainer) {\n\t\t\t\t\t// Add class to the first toolbar to remove the margin\n\t\t\t\t\tif (!addedTopClass) {\n\t\t\t\t\t\tif (!L.DomUtil.hasClass(toolbarContainer, topClassName)) {\n\t\t\t\t\t\t\tL.DomUtil.addClass(toolbarContainer.childNodes[0], topClassName);\n\t\t\t\t\t\t}\n\t\t\t\t\t\taddedTopClass = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tcontainer.appendChild(toolbarContainer);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn container;\n\t},\n\n\t// @method onRemove(): void\n\t// Removes the toolbars from the map toolbar container\n\tonRemove: function () {\n\t\tfor (var toolbarId in this._toolbars) {\n\t\t\tif (this._toolbars.hasOwnProperty(toolbarId)) {\n\t\t\t\tthis._toolbars[toolbarId].removeToolbar();\n\t\t\t}\n\t\t}\n\t},\n\n\t// @method setDrawingOptions(options): void\n\t// Sets options to all toolbar instances\n\tsetDrawingOptions: function (options) {\n\t\tfor (var toolbarId in this._toolbars) {\n\t\t\tif (this._toolbars[toolbarId] instanceof L.DrawToolbar) {\n\t\t\t\tthis._toolbars[toolbarId].setOptions(options);\n\t\t\t}\n\t\t}\n\t},\n\n\t_toolbarEnabled: function (e) {\n\t\tvar enabledToolbar = e.target;\n\n\t\tfor (var toolbarId in this._toolbars) {\n\t\t\tif (this._toolbars[toolbarId] !== enabledToolbar) {\n\t\t\t\tthis._toolbars[toolbarId].disable();\n\t\t\t}\n\t\t}\n\t}\n});\n\nL.Map.mergeOptions({\n\tdrawControlTooltips: true,\n\tdrawControl: false\n});\n\nL.Map.addInitHook(function () {\n\tif (this.options.drawControl) {\n\t\tthis.drawControl = new L.Control.Draw();\n\t\tthis.addControl(this.drawControl);\n\t}\n});\n"]}